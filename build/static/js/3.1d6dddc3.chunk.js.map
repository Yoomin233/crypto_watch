{"version":3,"sources":["components/chart.tsx"],"names":["themesData","chart","layout","backgroundColor","lineColor","textColor","watermark","color","crosshair","grid","vertLines","horzLines","series","topColor","bottomColor","TVChartWrapper","styled","div","Wrapper","TVChart","id","period","domRef","useRef","chartRef","seriesRef","data","loading","useUpdateData","useEffect","current","setData","timeScale","fitContent","width","height","getBoundingClientRect","createChart","handleScale","mouseWheel","pinch","axisPressedMouseMove","rightPriceScale","borderVisible","timeVisible","fixLeftEdge","fixRightEdge","tickMarkFormatter","time","tickMarkType","locale","Date","Number","toLocaleDateString","localization","timeFormatter","toLocaleString","priceFormatter","price","decimals","toFixed","addAreaSeries","lineWidth","applyOptions","className","undefined","ref"],"mappings":"qLAgEA,IAAIA,EAvDY,CACdC,MAAO,CACLC,OAAQ,CACNC,gBAAiB,cACjBC,UAAW,UACXC,UAAW,WAEbC,UAAW,CACTC,MAAO,oBAETC,UAAW,CACTD,MAAO,WAETE,KAAM,CACJC,UAAW,CACTH,MAAO,eAETI,UAAW,CACTJ,MAAO,iBAIbK,OAAQ,CACNC,SAAU,0BACVC,YAAa,0BACbV,UAAW,yBAmCf,MAAMW,EAAiBC,IAAOC,IAAV,6DAKdC,EAAUF,IAAOC,IAAV,yPA4LEE,UA1K2C,EACxDC,KAAK,EACLC,SAAS,SAET,MAAMC,EAASC,iBAAuB,MAEhCC,EAAWD,iBAAY,MACvBE,EAAYF,iBAAY,OAQvBG,EAAMC,GAAWC,YAAcR,EAAIC,GAmJ1C,OA/GAQ,qBAAU,KAER,IAAKP,EAAOQ,QAAS,OAMrB,GAAIN,EAASM,SAAWL,EAAUK,QAGhC,OAFAL,EAAUK,QAAQC,QAAQL,QAC1BF,EAASM,QAAQE,YAAYC,aAQ/B,MAAM,MAAEC,EAAF,OAASC,GAAWb,EAAOQ,QAAQM,wBAEnCnC,EAAQoC,YAAYf,EAAOQ,QAAS,CACxCI,QACAC,SACAG,YAAa,CACXC,YAAY,EACZC,OAAO,EACPC,sBAAsB,GAExBC,gBAAiB,CACfC,eAAe,GAEjBX,UAAW,CACTW,eAAe,EACfC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,kBAAmB,CACjBC,EACAC,EACAC,IAEO,IAAIC,KAAoB,IAAfC,OAAOJ,IAAcK,sBAMzCC,aAAc,CACZC,cAAgBP,GAEP,IAAIG,KAAoB,IAAfC,OAAOJ,IAAcQ,iBAGvCC,eAAiBC,IACf,MAAMC,EAAWD,GAAS,IAAO,EAAIA,EAAQ,EAAI,EAAI,EACrD,OAAOA,EAAME,QAAQD,EAArB,KAKNnC,EAASM,QAAU7B,EAEnBwB,EAAUK,QAAU7B,EAAM4D,cAAc,CACtChD,SAAU,2BACVC,YAAa,2BACbV,UAAW,wBACX0D,UAAW,IAGb7D,EAAM8D,aAAa/D,EAAmBC,OACtCwB,EAAUK,QAAQiC,aAAa/D,EAAmBY,QAIlDX,EAAM+B,YAAYC,aAElBR,EAAUK,QAAQC,QAAQL,EAA1B,GAkBC,CAACN,EAAIM,IAkBN,eAACR,EAAD,CAAS8C,UAAWrC,EAAU,eAAYsC,EAA1C,UACE,cAAClD,EAAD,CAAgBmD,IAAK5C,IACpBK,GAAW,cAAC,IAAD,MAHhB,C","file":"static/js/3.1d6dddc3.chunk.js","sourcesContent":["import {BusinessDay, createChart, TickMarkType, UTCTimestamp} from \"lightweight-charts\";\nimport {useEffect, useRef} from \"react\";\n// import { EventEmitter } from \"stream\";\nimport styled from \"styled-components\";\nimport Spinner from \"./Spinner\";\nimport useUpdateData from \"./useUpdateData\";\n\n// type DataStruct = { time: \"string\"; value: number };\n\nvar darkTheme = {\n  chart: {\n    layout: {\n      backgroundColor: \"transparent\",\n      lineColor: \"#2B2B43\",\n      textColor: \"#D9D9D9\"\n    },\n    watermark: {\n      color: \"rgba(0, 0, 0, 0)\"\n    },\n    crosshair: {\n      color: \"#758696\"\n    },\n    grid: {\n      vertLines: {\n        color: \"transparent\"\n      },\n      horzLines: {\n        color: \"transparent\"\n      }\n    }\n  },\n  series: {\n    topColor: \"rgba(32, 226, 47, 0.56)\",\n    bottomColor: \"rgba(32, 226, 47, 0.04)\",\n    lineColor: \"rgba(32, 226, 47, 1)\"\n  }\n};\n\nconst lightTheme = {\n  chart: {\n    layout: {\n      backgroundColor: \"#FFFFFF\",\n      lineColor: \"#2B2B43\",\n      textColor: \"#191919\"\n    },\n    watermark: {\n      color: \"rgba(0, 0, 0, 0)\"\n    },\n    grid: {\n      vertLines: {\n        visible: false\n      },\n      horzLines: {\n        color: \"#f0f3fa\"\n      }\n    }\n  },\n  series: {\n    topColor: \"rgba(33, 150, 243, 0.56)\",\n    bottomColor: \"rgba(33, 150, 243, 0.04)\",\n    lineColor: \"rgba(33, 150, 243, 1)\"\n  }\n};\n\nvar themesData: any = {\n  Dark: darkTheme,\n  Light: lightTheme\n};\n\nconst TVChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n\n  &.loading {\n    div.tv-lightweight-charts {\n      filter: brightness(0.5);\n    }\n  }\n\n  > span {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`;\n\nconst TVChart: React.FC<{ id: number; period: string }> = ({\n  id = 1,\n  period = \"1D\"\n}) => {\n  const domRef = useRef<HTMLDivElement>(null);\n\n  const chartRef = useRef<any>(null);\n  const seriesRef = useRef<any>(null);\n\n  // const clear = () => {\n  //   if (chartRef.current) {\n  //     chartRef.current.remove();\n  //   }\n  // };\n\n  const [data, loading] = useUpdateData(id, period);\n\n  //   const timerRef = useRef(null)\n\n  //   const [loading, setLoading] = useState<boolean>(true);\n  //   const [error, setError] = useState(false);\n\n  //   useEffect(() => {\n  //     if (loading) {\n  //       console.log(\"race!\");\n  //       timerRef.current = setTimeout(() => setError(true), 5000)\n  //     } else {\n\n  //     }\n  //   }, [loading]);\n\n  //   const getData = useCallback(() => {\n  //     return axios\n  //       .get(\n  //         `https://api.coinmarketcap.com/data-api/v3/cryptocurrency/detail/chart?id=${id}&range=${period}`\n  //       )\n  //       .then(({ data }) => {\n  //         const mappedData = Object.entries<any>(data.data.points).map(\n  //           ([key, value]) => ({\n  //             time: Number(key),\n  //             value: value.v[0],\n  //           })\n  //         );\n  //         setData(mappedData);\n  //         return mappedData;\n  //       })\n  //       .catch((e) => {\n  //         return [];\n  //       });\n  //   }, [id, period]);\n\n  useEffect(() => {\n    // console.log(\"render!\", domRef.current);\n    if (!domRef.current) return;\n\n    // console.log('update!', data)\n\n    // console.log(domRef.current, chartRef.current, seriesRef.current);\n\n    if (chartRef.current && seriesRef.current) {\n      seriesRef.current.setData(data);\n      chartRef.current.timeScale().fitContent();\n      return;\n    }\n\n    // clear();\n    // setLoading(true);\n\n    // console.log(\"init render!\", data);\n    const { width, height } = domRef.current.getBoundingClientRect();\n\n    const chart = createChart(domRef.current, {\n      width,\n      height,\n      handleScale: {\n        mouseWheel: false,\n        pinch: false,\n        axisPressedMouseMove: false\n      },\n      rightPriceScale: {\n        borderVisible: false\n      },\n      timeScale: {\n        borderVisible: false,\n        timeVisible: true,\n        fixLeftEdge: true,\n        fixRightEdge: true,\n        tickMarkFormatter: (\n          time: UTCTimestamp | BusinessDay,\n          tickMarkType: TickMarkType,\n          locale: string\n        ) => {\n          return new Date(Number(time) * 1000).toLocaleDateString();\n\n          //   console.log(time, tickMarkType);\n          //   return \"333\";\n        }\n      },\n      localization: {\n        timeFormatter: (time: BusinessDay | UTCTimestamp) => {\n          // console.log(time);\n          return new Date(Number(time) * 1000).toLocaleString();\n          // return dayjs.unix(time).toDate().toLocaleDateString(locale);\n        },\n        priceFormatter: (price: number) => {\n          const decimals = price <= 0.01 ? 6 : price < 1 ? 4 : 2;\n          return price.toFixed(decimals);\n        }\n      }\n    });\n\n    chartRef.current = chart;\n\n    seriesRef.current = chart.addAreaSeries({\n      topColor: \"rgba(33, 150, 243, 0.56)\",\n      bottomColor: \"rgba(33, 150, 243, 0.04)\",\n      lineColor: \"rgba(33, 150, 243, 1)\",\n      lineWidth: 1\n    });\n\n    chart.applyOptions(themesData[\"Dark\"].chart);\n    seriesRef.current.applyOptions(themesData[\"Dark\"].series);\n\n    // setLoading(false);\n\n    chart.timeScale().fitContent();\n\n    seriesRef.current.setData(data);\n\n    // console.log(\"mount!!\");\n\n    //   seriesRef.current.setData(data as any);\n    //   areaSeries.re\n\n    //   subscriber = eventEmitter.subscribe(`WS-${id}`, (wsData: any) => {\n    //     setData((data) => [\n    //       ...data,\n    //       {\n    //         time: Math.floor(Number(new Date()) / 1000),\n    //         value: wsData.p,\n    //       },\n    //     ]);\n    //   });\n    // });\n    // return () => eventEmitter.unsubscribe(`WS-${id}`, subscriber);\n  }, [id, data]);\n\n  //   useEffect(() => {\n  //     clear();\n  //   }, [period]);\n\n  //   useEffect(() => {\n  //     console.log(\"data update!\", seriesRef.current);\n  //     if (seriesRef.current && data.length) {\n  //       //   console.log(\"update!\");\n  //       seriesRef.current.setData(data as any);\n  //     }\n  //   }, [data]);\n\n  //   console.log(data);\n\n  //   if (!data.length) return ;\n  return (\n    <Wrapper className={loading ? \"loading\" : undefined}>\n      <TVChartWrapper ref={domRef}></TVChartWrapper>\n      {loading && <Spinner></Spinner>}\n    </Wrapper>\n  );\n};\n\nexport default TVChart;\n"],"sourceRoot":""}