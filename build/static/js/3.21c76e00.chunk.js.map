{"version":3,"sources":["components/useUpdateData.ts","components/chart.tsx"],"names":["TimeInterval","useUpdateData","id","period","useState","data","setData","loading","setLoading","getData","useCallback","axios","get","then","mappedData","Object","entries","points","map","key","value","time","Number","v","catch","e","finally","useEffect","subscriber","eventEmitter","subscribe","wsData","lastData","length","lastDataTime","Date","console","log","Math","floor","p","price","unsubscribe","themesData","chart","layout","backgroundColor","lineColor","textColor","watermark","color","crosshair","grid","vertLines","horzLines","series","topColor","bottomColor","TVChartWrapper","styled","div","TVChart","domRef","useRef","chartRef","seriesRef","current","timeScale","fitContent","getBoundingClientRect","width","height","createChart","handleScale","mouseWheel","pinch","axisPressedMouseMove","rightPriceScale","borderVisible","timeVisible","fixLeftEdge","fixRightEdge","tickMarkFormatter","tickMarkType","locale","toLocaleDateString","localization","timeFormatter","toLocaleString","addAreaSeries","lineWidth","applyOptions","ref"],"mappings":"qMAIMA,EAAoB,CACxB,KAAM,IACN,KAAM,IACN,KAAM,KACN,KAAM,KACN,KAAM,OAyEOC,EAtEO,SAACC,EAAYC,GAAsC,IAAD,EAC9CC,mBAAgB,IAD8B,mBAC/DC,EAD+D,KACzDC,EADyD,OAExCF,oBAAkB,GAFsB,mBAE/DG,EAF+D,KAEtDC,EAFsD,KAMhEC,EAAUC,uBAAY,WAG1B,OADAF,GAAW,GACJG,IACJC,IADI,mFAEyEV,EAFzE,kBAEqFC,IAEzFU,MAAK,YAAe,IAAZR,EAAW,EAAXA,KACDS,EAAaC,OAAOC,QAAaX,EAAKA,KAAKY,QAAQC,KACvD,mCAAEC,EAAF,KAAOC,EAAP,WAAmB,CACjBC,KAAMC,OAAOH,GACbC,MAAOA,EAAMG,EAAE,OAInB,OADAjB,EAAQQ,GACDA,KAERU,OAAM,SAACC,GACN,MAAO,MAERC,SAAQ,WACPlB,GAAW,QAId,CAACN,EAAIC,IAoCR,OAlCAwB,qBAAU,WACRlB,IACA,IAAMmB,EAAaC,IAAaC,UAAb,aAA6B5B,IAAM,SAAC6B,GACrDzB,GAAQ,SAACD,GACP,IAAM2B,EAAW3B,EAAKA,EAAK4B,OAAS,GAC9BC,EAA+B,IAAhBF,EAASX,KAG9B,OAFYC,OAAO,IAAIa,MAEbD,GADkBlC,EAAaG,IAEvCiC,QAAQC,IAAI,oBACN,GAAN,mBACKhC,GADL,CAEE,CACEgB,KAAMiB,KAAKC,MAAMjB,OAAO,IAAIa,MAAU,KACtCf,MAAOW,EAAOS,OAKlBJ,QAAQC,IAAI,oBACZL,EAASS,MAAQV,EAAOS,EACjB,YAAInC,UAOjB,OAAO,WACL+B,QAAQC,IAAI,gBACZR,IAAaa,YAAb,aAA+BxC,GAAM0B,MAEtC,CAAC1B,EAAIC,EAAQM,IAET,CAACJ,EAAME,I,OCPZoC,EAvDY,CACdC,MAAO,CACLC,OAAQ,CACNC,gBAAiB,cACjBC,UAAW,UACXC,UAAW,WAEbC,UAAW,CACTC,MAAO,oBAETC,UAAW,CACTD,MAAO,WAETE,KAAM,CACJC,UAAW,CACTH,MAAO,eAETI,UAAW,CACTJ,MAAO,iBAIbK,OAAQ,CACNC,SAAU,0BACVC,YAAa,0BACbV,UAAW,yBAmCTW,EAAiBC,IAAOC,IAAV,6DAyKLC,UApK2C,SAAC,GAGpD,IAAD,IAFJ3D,UAEI,MAFC,EAED,MADJC,cACI,MADK,KACL,EACE2D,EAASC,iBAAuB,MAEhCC,EAAWD,iBAAY,MACvBE,EAAYF,iBAAY,MAJ1B,EAYoB9D,EAAcC,EAAIC,GAZtC,mBAYGE,EAZH,UAyJJ,OAzGAsB,qBAAU,WAER,GAAKmC,EAAOI,QAAZ,CAIA,GAAIF,EAASE,SAAWD,EAAUC,QAGhC,OAFAD,EAAUC,QAAQ5D,QAAQD,QAC1B2D,EAASE,QAAQC,YAAYC,aARjB,MAgBYN,EAAOI,QAAQG,wBAAjCC,EAhBM,EAgBNA,MAAOC,EAhBD,EAgBCA,OAET3B,EAAQ4B,YAAYV,EAAOI,QAAS,CACxCI,QACAC,SACAE,YAAa,CACXC,YAAY,EACZC,OAAO,EACPC,sBAAsB,GAExBC,gBAAiB,CACfC,eAAe,GAEjBX,UAAW,CACTW,eAAe,EACfC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,kBAAmB,SACjB7D,EACA8D,EACAC,GAEA,OAAO,IAAIjD,KAAoB,IAAfb,OAAOD,IAAcgE,uBAMzCC,aAAc,CACZC,cAAe,SAAClE,GAEd,OAAO,IAAIc,KAAoB,IAAfb,OAAOD,IAAcmE,qBAM3CxB,EAASE,QAAUtB,EAEnBqB,EAAUC,QAAUtB,EAAM6C,cAAc,CACtCjC,SAAU,2BACVC,YAAa,2BACbV,UAAW,wBACX2C,UAAW,IAGb9C,EAAM+C,aAAahD,EAAmBC,OACtCqB,EAAUC,QAAQyB,aAAahD,EAAmBY,QAIlDX,EAAMuB,YAAYC,aAElBH,EAAUC,QAAQ5D,QAAQD,GAE1B+B,QAAQC,IAAI,cAgBX,CAACnC,EAAIG,IAkBN,mCACE,cAACqD,EAAD,CAAgBkC,IAAK9B","file":"static/js/3.21c76e00.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport eventEmitter from \"../utils/eventEmitter\";\n\nconst TimeInterval: any = {\n  \"1D\": 300,\n  \"7D\": 300,\n  \"1M\": 3600,\n  \"3M\": 3600,\n  \"1Y\": 86400,\n};\n\nconst useUpdateData = (id: number, period: string): [any[], boolean] => {\n  const [data, setData] = useState<any[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  //   const latestNewLine = useRef<number>(0);\n\n  const getData = useCallback(() => {\n    // clear();\n    setLoading(true);\n    return axios\n      .get(\n        `https://api.coinmarketcap.com/data-api/v3/cryptocurrency/detail/chart?id=${id}&range=${period}`\n      )\n      .then(({ data }) => {\n        const mappedData = Object.entries<any>(data.data.points).map(\n          ([key, value]) => ({\n            time: Number(key),\n            value: value.v[0],\n          })\n        );\n        setData(mappedData);\n        return mappedData;\n      })\n      .catch((e) => {\n        return [];\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n\n    // return () => eventEmitter.unsubscribe(`WS-${id}`, subscriber);\n  }, [id, period]);\n\n  useEffect(() => {\n    getData();\n    const subscriber = eventEmitter.subscribe(`WS-${id}`, (wsData: any) => {\n      setData((data) => {\n        const lastData = data[data.length - 1];\n        const lastDataTime = lastData.time * 1000;\n        const now = Number(new Date());\n        const shouldInsertNewData = TimeInterval[period];\n        if (now - lastDataTime >= shouldInsertNewData) {\n          console.log(\"insert new line!\");\n          return [\n            ...data,\n            {\n              time: Math.floor(Number(new Date()) / 1000),\n              value: wsData.p,\n            },\n          ];\n        } else {\n          // lastData.time = now\n          console.log(\"in-place update!\");\n          lastData.price = wsData.p;\n          return [...data];\n        }\n        // console.log(lastDataTime);\n        // // console.log(data);\n        // return data;\n      });\n    });\n    return () => {\n      console.log(\"unsubscribe!\");\n      eventEmitter.unsubscribe(`WS-${id}`, subscriber);\n    };\n  }, [id, period, getData]);\n\n  return [data, loading];\n};\n\nexport default useUpdateData;\n","import axios from \"axios\";\nimport {\n  BusinessDay,\n  createChart,\n  TickMarkType,\n  UTCTimestamp,\n} from \"lightweight-charts\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n// import { EventEmitter } from \"stream\";\nimport styled from \"styled-components\";\nimport eventEmitter from \"../utils/eventEmitter\";\n// import useSubsequentUpdate from \"../hooks/useSubsequentUpdate\";\nimport Spinner from \"./Spinner\";\nimport useUpdateData from \"./useUpdateData\";\n\n// type DataStruct = { time: \"string\"; value: number };\n\nvar darkTheme = {\n  chart: {\n    layout: {\n      backgroundColor: \"transparent\",\n      lineColor: \"#2B2B43\",\n      textColor: \"#D9D9D9\",\n    },\n    watermark: {\n      color: \"rgba(0, 0, 0, 0)\",\n    },\n    crosshair: {\n      color: \"#758696\",\n    },\n    grid: {\n      vertLines: {\n        color: \"transparent\",\n      },\n      horzLines: {\n        color: \"transparent\",\n      },\n    },\n  },\n  series: {\n    topColor: \"rgba(32, 226, 47, 0.56)\",\n    bottomColor: \"rgba(32, 226, 47, 0.04)\",\n    lineColor: \"rgba(32, 226, 47, 1)\",\n  },\n};\n\nconst lightTheme = {\n  chart: {\n    layout: {\n      backgroundColor: \"#FFFFFF\",\n      lineColor: \"#2B2B43\",\n      textColor: \"#191919\",\n    },\n    watermark: {\n      color: \"rgba(0, 0, 0, 0)\",\n    },\n    grid: {\n      vertLines: {\n        visible: false,\n      },\n      horzLines: {\n        color: \"#f0f3fa\",\n      },\n    },\n  },\n  series: {\n    topColor: \"rgba(33, 150, 243, 0.56)\",\n    bottomColor: \"rgba(33, 150, 243, 0.04)\",\n    lineColor: \"rgba(33, 150, 243, 1)\",\n  },\n};\n\nvar themesData: any = {\n  Dark: darkTheme,\n  Light: lightTheme,\n};\n\nconst TVChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst TVChart: React.FC<{ id: number; period: string }> = ({\n  id = 1,\n  period = \"1D\",\n}) => {\n  const domRef = useRef<HTMLDivElement>(null);\n\n  const chartRef = useRef<any>(null);\n  const seriesRef = useRef<any>(null);\n\n  const clear = () => {\n    if (chartRef.current) {\n      chartRef.current.remove();\n    }\n  };\n\n  const [data, loading] = useUpdateData(id, period);\n\n  //   const timerRef = useRef(null)\n\n  //   const [loading, setLoading] = useState<boolean>(true);\n  //   const [error, setError] = useState(false);\n\n  //   useEffect(() => {\n  //     if (loading) {\n  //       console.log(\"race!\");\n  //       timerRef.current = setTimeout(() => setError(true), 5000)\n  //     } else {\n\n  //     }\n  //   }, [loading]);\n\n  //   const getData = useCallback(() => {\n  //     return axios\n  //       .get(\n  //         `https://api.coinmarketcap.com/data-api/v3/cryptocurrency/detail/chart?id=${id}&range=${period}`\n  //       )\n  //       .then(({ data }) => {\n  //         const mappedData = Object.entries<any>(data.data.points).map(\n  //           ([key, value]) => ({\n  //             time: Number(key),\n  //             value: value.v[0],\n  //           })\n  //         );\n  //         setData(mappedData);\n  //         return mappedData;\n  //       })\n  //       .catch((e) => {\n  //         return [];\n  //       });\n  //   }, [id, period]);\n\n  useEffect(() => {\n    // console.log(\"render!\", domRef.current);\n    if (!domRef.current) return;\n\n    // console.log(domRef.current, chartRef.current, seriesRef.current);\n\n    if (chartRef.current && seriesRef.current) {\n      seriesRef.current.setData(data);\n      chartRef.current.timeScale().fitContent();\n      return;\n    }\n\n    // clear();\n    // setLoading(true);\n\n    // console.log(\"init render!\", data);\n    const { width, height } = domRef.current.getBoundingClientRect();\n\n    const chart = createChart(domRef.current, {\n      width,\n      height,\n      handleScale: {\n        mouseWheel: false,\n        pinch: false,\n        axisPressedMouseMove: false,\n      },\n      rightPriceScale: {\n        borderVisible: false,\n      },\n      timeScale: {\n        borderVisible: false,\n        timeVisible: true,\n        fixLeftEdge: true,\n        fixRightEdge: true,\n        tickMarkFormatter: (\n          time: UTCTimestamp | BusinessDay,\n          tickMarkType: TickMarkType,\n          locale: string\n        ) => {\n          return new Date(Number(time) * 1000).toLocaleDateString();\n\n          //   console.log(time, tickMarkType);\n          //   return \"333\";\n        },\n      },\n      localization: {\n        timeFormatter: (time: BusinessDay | UTCTimestamp) => {\n          // console.log(time);\n          return new Date(Number(time) * 1000).toLocaleString();\n          // return dayjs.unix(time).toDate().toLocaleDateString(locale);\n        },\n      },\n    });\n\n    chartRef.current = chart;\n\n    seriesRef.current = chart.addAreaSeries({\n      topColor: \"rgba(33, 150, 243, 0.56)\",\n      bottomColor: \"rgba(33, 150, 243, 0.04)\",\n      lineColor: \"rgba(33, 150, 243, 1)\",\n      lineWidth: 1,\n    });\n\n    chart.applyOptions(themesData[\"Dark\"].chart);\n    seriesRef.current.applyOptions(themesData[\"Dark\"].series);\n\n    // setLoading(false);\n\n    chart.timeScale().fitContent();\n\n    seriesRef.current.setData(data);\n\n    console.log(\"mount!!\");\n\n    //   seriesRef.current.setData(data as any);\n    //   areaSeries.re\n\n    //   subscriber = eventEmitter.subscribe(`WS-${id}`, (wsData: any) => {\n    //     setData((data) => [\n    //       ...data,\n    //       {\n    //         time: Math.floor(Number(new Date()) / 1000),\n    //         value: wsData.p,\n    //       },\n    //     ]);\n    //   });\n    // });\n    // return () => eventEmitter.unsubscribe(`WS-${id}`, subscriber);\n  }, [id, data]);\n\n  //   useEffect(() => {\n  //     clear();\n  //   }, [period]);\n\n  //   useEffect(() => {\n  //     console.log(\"data update!\", seriesRef.current);\n  //     if (seriesRef.current && data.length) {\n  //       //   console.log(\"update!\");\n  //       seriesRef.current.setData(data as any);\n  //     }\n  //   }, [data]);\n\n  //   console.log(data);\n\n  //   if (!data.length) return ;\n  return (\n    <>\n      <TVChartWrapper ref={domRef}></TVChartWrapper>\n      {/* <Spinner></Spinner> */}\n    </>\n  );\n};\n\nexport default TVChart;\n"],"sourceRoot":""}