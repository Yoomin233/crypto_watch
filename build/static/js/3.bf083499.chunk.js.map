{"version":3,"sources":["components/chart.tsx"],"names":["themesData","chart","layout","backgroundColor","lineColor","textColor","watermark","color","crosshair","grid","vertLines","horzLines","series","topColor","bottomColor","TVChartWrapper","styled","div","TVChart","id","period","domRef","useRef","chartRef","seriesRef","useState","data","setData","loading","setLoading","getData","useCallback","axios","get","then","mappedData","Object","entries","points","map","key","value","time","Number","v","catch","e","useEffect","current","remove","subscriber","getBoundingClientRect","width","height","createChart","handleScale","mouseWheel","pinch","axisPressedMouseMove","rightPriceScale","borderVisible","timeScale","timeVisible","fixLeftEdge","fixRightEdge","tickMarkFormatter","tickMarkType","locale","Date","toLocaleDateString","localization","timeFormatter","toLocaleString","addAreaSeries","lineWidth","applyOptions","fitContent","eventEmitter","subscribe","wsData","Math","floor","p","unsubscribe","length","ref"],"mappings":"oNAwEIA,EAvDY,CACdC,MAAO,CACLC,OAAQ,CACNC,gBAAiB,cACjBC,UAAW,UACXC,UAAW,WAEbC,UAAW,CACTC,MAAO,oBAETC,UAAW,CACTD,MAAO,WAETE,KAAM,CACJC,UAAW,CACTH,MAAO,eAETI,UAAW,CACTJ,MAAO,iBAIbK,OAAQ,CACNC,SAAU,0BACVC,YAAa,0BACbV,UAAW,yBAmCTW,EAAiBC,IAAOC,IAAV,6DAmKLC,UA9J2C,SAAC,GAGpD,IAAD,IAFJC,UAEI,MAFC,EAED,MADJC,cACI,MADK,EACL,EACEC,EAASC,iBAAuB,MAEhCC,EAAWD,iBAAY,MACvBE,EAAYF,iBAAY,MAJ1B,EAMoBG,mBAAgB,IANpC,mBAMGC,EANH,KAMSC,EANT,OAU0BF,oBAAkB,GAV5C,mBAUGG,EAVH,KAUYC,EAVZ,KAsBEC,EAAUC,uBAAY,WAC1B,OAAOC,IACJC,IADI,mFAEyEd,EAFzE,kBAEqFC,IAEzFc,MAAK,YAAe,IAAZR,EAAW,EAAXA,KACDS,EAAaC,OAAOC,QAAaX,EAAKA,KAAKY,QAAQC,KACvD,mCAAEC,EAAF,KAAOC,EAAP,WAAmB,CACjBC,KAAMC,OAAOH,GACbC,MAAOA,EAAMG,EAAE,OAKnB,OADAjB,EAAQQ,GACDA,KAIRU,OAAM,SAACC,GACN,MAAO,QAEV,CAAC3B,EAAIC,IAyGR,OAxFA2B,qBAAU,WACR,GAAK1B,EAAO2B,QAAZ,CAZIzB,EAASyB,SACXzB,EAASyB,QAAQC,SAanBpB,GAAW,GAHG,IAOVqB,EAPU,EAKY7B,EAAO2B,QAAQG,wBAAjCC,EALM,EAKNA,MAAOC,EALD,EAKCA,OAyEf,OArEAvB,IAAUI,MAAK,SAACR,GAEd,GAAKL,EAAO2B,QAAZ,CAEA,IAAM/C,EAAQqD,YAAYjC,EAAO2B,QAAS,CACxCI,QACAC,SACAE,YAAa,CACXC,YAAY,EACZC,OAAO,EACPC,sBAAsB,GAExBC,gBAAiB,CACfC,eAAe,GAEjBC,UAAW,CACTD,eAAe,EACfE,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,kBAAmB,SACjBvB,EACAwB,EACAC,GAEA,OAAO,IAAIC,KAAoB,IAAfzB,OAAOD,IAAc2B,uBAMzCC,aAAc,CACZC,cAAe,SAAC7B,GAEd,OAAO,IAAI0B,KAAoB,IAAfzB,OAAOD,IAAc8B,qBAM3CjD,EAASyB,QAAU/C,EAEnBuB,EAAUwB,QAAU/C,EAAMwE,cAAc,CACtC5D,SAAU,2BACVC,YAAa,2BACbV,UAAW,wBACXsE,UAAW,IAGbzE,EAAM0E,aAAa3E,EAAmBC,OACtCuB,EAAUwB,QAAQ2B,aAAa3E,EAAmBY,QAElDiB,GAAW,GAEX5B,EAAM4D,YAAYe,aAElBpD,EAAUwB,QAAQrB,QAAQD,GAG1BwB,EAAa2B,IAAaC,UAAb,aAA6B3D,IAAM,SAAC4D,GAC/CpD,GAAQ,SAACD,GAAD,4BACHA,GADG,CAEN,CACEgB,KAAMsC,KAAKC,MAAMtC,OAAO,IAAIyB,MAAU,KACtC3B,MAAOsC,EAAOG,eAKf,kBAAML,IAAaM,YAAb,aAA+BhE,GAAM+B,OACjD,CAACpB,IAEJiB,qBAAU,WACJvB,EAAUwB,SAAWtB,EAAK0D,QAC5B5D,EAAUwB,QAAQrB,QAAQD,KAE3B,CAACA,IAIF,cAACX,EAAD,CAAgBsE,IAAKhE,EAArB,SACGO,EAAU,cAAC,IAAD,IAAsB","file":"static/js/3.bf083499.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n  BusinessDay,\n  createChart,\n  ISeriesApi,\n  TickMarkType,\n  UTCTimestamp,\n} from \"lightweight-charts\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n// import { EventEmitter } from \"stream\";\nimport styled from \"styled-components\";\nimport eventEmitter from \"../utils/eventEmitter\";\n// import useSubsequentUpdate from \"../hooks/useSubsequentUpdate\";\nimport Spinner from \"./Spinner\";\n\n// type DataStruct = { time: \"string\"; value: number };\n\nvar darkTheme = {\n  chart: {\n    layout: {\n      backgroundColor: \"transparent\",\n      lineColor: \"#2B2B43\",\n      textColor: \"#D9D9D9\",\n    },\n    watermark: {\n      color: \"rgba(0, 0, 0, 0)\",\n    },\n    crosshair: {\n      color: \"#758696\",\n    },\n    grid: {\n      vertLines: {\n        color: \"transparent\",\n      },\n      horzLines: {\n        color: \"transparent\",\n      },\n    },\n  },\n  series: {\n    topColor: \"rgba(32, 226, 47, 0.56)\",\n    bottomColor: \"rgba(32, 226, 47, 0.04)\",\n    lineColor: \"rgba(32, 226, 47, 1)\",\n  },\n};\n\nconst lightTheme = {\n  chart: {\n    layout: {\n      backgroundColor: \"#FFFFFF\",\n      lineColor: \"#2B2B43\",\n      textColor: \"#191919\",\n    },\n    watermark: {\n      color: \"rgba(0, 0, 0, 0)\",\n    },\n    grid: {\n      vertLines: {\n        visible: false,\n      },\n      horzLines: {\n        color: \"#f0f3fa\",\n      },\n    },\n  },\n  series: {\n    topColor: \"rgba(33, 150, 243, 0.56)\",\n    bottomColor: \"rgba(33, 150, 243, 0.04)\",\n    lineColor: \"rgba(33, 150, 243, 1)\",\n  },\n};\n\nvar themesData: any = {\n  Dark: darkTheme,\n  Light: lightTheme,\n};\n\nconst TVChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst TVChart: React.FC<{ id: number; period: string }> = ({\n  id = 1,\n  period = 7,\n}) => {\n  const domRef = useRef<HTMLDivElement>(null);\n\n  const chartRef = useRef<any>(null);\n  const seriesRef = useRef<any>(null);\n\n  const [data, setData] = useState<any[]>([]);\n\n  //   const timerRef = useRef(null)\n\n  const [loading, setLoading] = useState<boolean>(true);\n  //   const [error, setError] = useState(false);\n\n  //   useEffect(() => {\n  //     if (loading) {\n  //       console.log(\"race!\");\n  //       timerRef.current = setTimeout(() => setError(true), 5000)\n  //     } else {\n\n  //     }\n  //   }, [loading]);\n\n  const getData = useCallback(() => {\n    return axios\n      .get(\n        `https://api.coinmarketcap.com/data-api/v3/cryptocurrency/detail/chart?id=${id}&range=${period}`\n      )\n      .then(({ data }) => {\n        const mappedData = Object.entries<any>(data.data.points).map(\n          ([key, value]) => ({\n            time: Number(key),\n            value: value.v[0],\n          })\n        );\n        // console.log(mappedData);\n        setData(mappedData);\n        return mappedData;\n\n        // console.log(data.data.points);\n      })\n      .catch((e) => {\n        return [];\n      });\n  }, [id, period]);\n\n  //   useSubsequentUpdate(() => {\n  // }, `${id}${period}`);\n\n  const clear = () => {\n    if (chartRef.current) {\n      chartRef.current.remove();\n    }\n    // console.log(ref.current?.children?.[0]);\n    // ref.current?.removeChild(ref.current?.children?.[0]);\n    // if (ref.current) {\n    //   ref.current.innerHTML = \"\";\n    // }\n    // setData([]);\n  };\n\n  useEffect(() => {\n    if (!domRef.current) return;\n    clear();\n    setLoading(true);\n    // console.log(\"exec!\");\n    const { width, height } = domRef.current.getBoundingClientRect();\n\n    let subscriber: any;\n\n    getData().then((data) => {\n      //   console.log(data);\n      if (!domRef.current) return;\n      //   setData(data);\n      const chart = createChart(domRef.current, {\n        width,\n        height,\n        handleScale: {\n          mouseWheel: false,\n          pinch: false,\n          axisPressedMouseMove: false,\n        },\n        rightPriceScale: {\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          timeVisible: true,\n          fixLeftEdge: true,\n          fixRightEdge: true,\n          tickMarkFormatter: (\n            time: UTCTimestamp | BusinessDay,\n            tickMarkType: TickMarkType,\n            locale: string\n          ) => {\n            return new Date(Number(time) * 1000).toLocaleDateString();\n\n            //   console.log(time, tickMarkType);\n            //   return \"333\";\n          },\n        },\n        localization: {\n          timeFormatter: (time: BusinessDay | UTCTimestamp) => {\n            // console.log(time);\n            return new Date(Number(time) * 1000).toLocaleString();\n            // return dayjs.unix(time).toDate().toLocaleDateString(locale);\n          },\n        },\n      });\n\n      chartRef.current = chart;\n\n      seriesRef.current = chart.addAreaSeries({\n        topColor: \"rgba(33, 150, 243, 0.56)\",\n        bottomColor: \"rgba(33, 150, 243, 0.04)\",\n        lineColor: \"rgba(33, 150, 243, 1)\",\n        lineWidth: 1,\n      });\n\n      chart.applyOptions(themesData[\"Dark\"].chart);\n      seriesRef.current.applyOptions(themesData[\"Dark\"].series);\n\n      setLoading(false);\n\n      chart.timeScale().fitContent();\n\n      seriesRef.current.setData(data as any);\n      //   areaSeries.re\n\n      subscriber = eventEmitter.subscribe(`WS-${id}`, (wsData: any) => {\n        setData((data) => [\n          ...data,\n          {\n            time: Math.floor(Number(new Date()) / 1000),\n            value: wsData.p,\n          },\n        ]);\n      });\n    });\n    return () => eventEmitter.unsubscribe(`WS-${id}`, subscriber);\n  }, [getData]);\n\n  useEffect(() => {\n    if (seriesRef.current && data.length) {\n      seriesRef.current.setData(data as any);\n    }\n  }, [data]);\n\n  //   if (!data.length) return ;\n  return (\n    <TVChartWrapper ref={domRef}>\n      {loading ? <Spinner></Spinner> : null}\n    </TVChartWrapper>\n  );\n};\n\nexport default TVChart;\n"],"sourceRoot":""}